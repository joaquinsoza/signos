// Knowledge RAG Service - Educational content about sign language
import { Env } from '../types';

export interface KnowledgeArticle {
  id: string;
  title: string;
  content: string;
  category: string;
  confidence: number;
}

export class KnowledgeService {
  constructor(private env: Env) {}

  /**
   * Search knowledge base using RAG
   */
  async searchKnowledge(query: string): Promise<KnowledgeArticle[]> {
    try {
      // Check if Knowledge Vectorize is available
      if (!this.env.KNOWLEDGE_VECTORIZE) {
        console.warn('[KnowledgeService] Knowledge Vectorize not available');
        return this.getFallbackKnowledge(query);
      }

      // Get embedding for the query
      const embedding = await this.getEmbedding(query);
      console.log(`[KnowledgeService] Generated embedding for query: "${query}"`);
      
      // Query Knowledge Vectorize
      const results = await this.env.KNOWLEDGE_VECTORIZE.query(embedding, {
        topK: 5,
        returnValues: true,
        returnMetadata: 'all',
      });

      console.log(`[KnowledgeService] Vectorize returned ${results.matches?.length || 0} matches`);

      // Parse results
      const articles = this.parseVectorizeResults(results);
      
      // If no results from RAG, use fallback
      if (articles.length === 0) {
        console.log('[KnowledgeService] No matches found, using fallback');
        return this.getFallbackKnowledge(query);
      }

      return articles;
    } catch (error) {
      console.error('[KnowledgeService] Error searching knowledge:', error);
      return this.getFallbackKnowledge(query);
    }
  }

  /**
   * Get fallback knowledge when Vectorize is not available
   * This provides basic information until the knowledge base is populated
   */
  private getFallbackKnowledge(query: string): KnowledgeArticle[] {
    const lowerQuery = query.toLowerCase();
    
    const knowledgeBase: KnowledgeArticle[] = [
      {
        id: 'historia-lsch',
        title: 'Historia de la Lengua de Se√±as Chilena',
        content: `La Lengua de Se√±as Chilena (LSCh) es la lengua natural de la comunidad sorda en Chile. 
        
Su historia moderna comienza en 1852 con la fundaci√≥n de la primera escuela para sordos en Santiago. La LSCh se ha desarrollado de forma natural dentro de la comunidad sorda chilena, incorporando elementos culturales y ling√º√≠sticos √∫nicos del pa√≠s.

En 2010, la Ley 20.422 reconoci√≥ oficialmente la LSCh como medio de comunicaci√≥n de la comunidad sorda en Chile, un hito importante para los derechos de las personas sordas.

Hoy en d√≠a, se estima que m√°s de 100,000 personas usan LSCh en Chile, entre personas sordas, sus familias, int√©rpretes y educadores.`,
        category: 'historia',
        confidence: 0.9,
      },
      {
        id: 'gramatica-lsch',
        title: 'Gram√°tica de la Lengua de Se√±as',
        content: `La LSCh, como todas las lenguas de se√±as, tiene su propia gram√°tica que difiere del espa√±ol.

**Estructura b√°sica:**
- Orden: Tiempo + Sujeto + Objeto + Verbo (diferente del espa√±ol)
- No usa art√≠culos (el, la, los, las)
- Los tiempos verbales se marcan con se√±as espec√≠ficas al inicio
- Utiliza el espacio para establecer referentes

**Componentes de una se√±a:**
1. **Configuraci√≥n de la mano**: Forma que toma la mano
2. **Ubicaci√≥n**: D√≥nde se realiza la se√±a (en el espacio)
3. **Movimiento**: C√≥mo se mueve la mano
4. **Orientaci√≥n**: Hacia d√≥nde apunta la palma
5. **Expresi√≥n facial**: Componente gramatical crucial

**Ejemplo:**
En espa√±ol: "Ayer fui al cine"
En LSCh: AYER YO CINE IR`,
        category: 'gramatica',
        confidence: 0.85,
      },
      {
        id: 'cultura-sorda',
        title: 'Cultura Sorda',
        content: `La cultura sorda es el conjunto de valores, normas y pr√°cticas compartidas por la comunidad de personas sordas.

**Aspectos clave:**

**1. Identidad:** Muchas personas sordas se identifican como parte de una comunidad ling√º√≠stica y cultural, no como personas con discapacidad.

**2. Lengua:** La lengua de se√±as es el elemento central que une a la comunidad.

**3. Valores:**
- Comunicaci√≥n directa y visual
- Apreciaci√≥n de la expresividad
- Sentido de pertenencia comunitaria
- Orgullo por su lengua y cultura

**4. Normas sociales:**
- Al hablar con una persona sorda, mant√©n contacto visual
- Toca suavemente el hombro para llamar la atenci√≥n
- No interrumpas el campo visual durante una conversaci√≥n
- Las despedidas pueden ser m√°s largas (conversaciones ricas)

**5. Artes y expresi√≥n:** La comunidad sorda tiene una rica tradici√≥n en teatro, poes√≠a en se√±as, humor y narrativa visual.`,
        category: 'cultura',
        confidence: 0.88,
      },
      {
        id: 'expresiones-faciales',
        title: 'Importancia de las Expresiones Faciales',
        content: `En la lengua de se√±as, las expresiones faciales NO son solo emocionales, son GRAMATICALES.

**Funciones:**

**1. Gramaticales:**
- **Preguntas S√≠/No**: Cejas arriba
- **Preguntas WH** (qu√©, qui√©n, d√≥nde): Cejas abajo
- **Negaci√≥n**: Movimiento de cabeza + expresi√≥n
- **Afirmaci√≥n**: Asentir
- **Condicionales**: Cejas arriba + leve inclinaci√≥n

**2. Adverbiales:**
- Intensidad (muy, mucho): Expresi√≥n intensa
- Suavidad (poco, suave): Expresi√≥n relajada
- Rapidez/lentitud: Reflejan la velocidad del movimiento

**3. Emocionales:**
- Alegr√≠a, tristeza, sorpresa (como en todas las lenguas)

**Ejemplo pr√°ctico:**
La misma se√±a puede significar cosas diferentes seg√∫n la expresi√≥n:
- "¬øAgua?" (cejas arriba) = pregunta
- "AGUA" (neutral) = afirmaci√≥n
- "¬°AGUA!" (cejas abajo, boca abierta) = exclamaci√≥n/urgencia

**Tip:** Las expresiones faciales comienzan ANTES de la se√±a y duran hasta el final. Son simult√°neas, no secuenciales.`,
        category: 'tecnica',
        confidence: 0.92,
      },
      {
        id: 'diferencias-lenguas-senas',
        title: 'Diferencias entre Lenguas de Se√±as',
        content: `Las lenguas de se√±as NO son universales. Cada pa√≠s/regi√≥n tiene su propia lengua de se√±as.

**Lenguas de Se√±as principales:**
- **LSCh**: Lengua de Se√±as Chilena (Chile)
- **ASL**: American Sign Language (EE.UU., Canad√° angl√≥fono)
- **LSM**: Lengua de Se√±as Mexicana (M√©xico)
- **LSA**: Lengua de Se√±as Argentina (Argentina)
- **BSL**: British Sign Language (Reino Unido)
- **ISL**: Irish Sign Language (Irlanda)
- Y m√°s de 300 lenguas de se√±as en el mundo

**Diferencias:**
1. **Alfabeto manual**: Cada lengua tiene su propio dactilol√≥gico
2. **Vocabulario**: Se√±as diferentes para las mismas palabras
3. **Gram√°tica**: Estructuras sint√°cticas propias
4. **Expresiones idiom√°ticas**: √önicas de cada cultura

**Ejemplo - "Madre":**
- LSCh: Mano abierta, dedos juntos, toca mejilla
- ASL: Pulgar toca barbilla, dedos extendidos
- LSM: Diferente configuraci√≥n y movimiento

**Curiosidad:** Aunque ASL se usa en EE.UU., es m√°s similar a la Lengua de Se√±as Francesa (LSF) que a la BSL brit√°nica, debido a su historia.`,
        category: 'linguistica',
        confidence: 0.87,
      },
      {
        id: 'aprender-lsch',
        title: 'Consejos para Aprender LSCh',
        content: `**1. Inmersi√≥n:**
- Participa en eventos de la comunidad sorda
- Busca conversaciones con se√±antes nativos
- Mira videos en LSCh

**2. Pr√°ctica regular:**
- 15-30 minutos diarios es mejor que sesiones largas espaciadas
- Practica frente al espejo (verifica tu expresi√≥n)
- Graba tu se√±ado y revisa

**3. Componentes clave:**
- **Manos**: Configuraci√≥n, ubicaci√≥n, movimiento
- **Expresi√≥n facial**: ¬°Fundamental!
- **Cuerpo**: Postura y movimientos corporales
- **Espacio**: Usa el espacio a tu alrededor

**4. No traduzcas palabra por palabra:**
- Piensa en conceptos, no en espa√±ol palabra por palabra
- La gram√°tica de LSCh es diferente al espa√±ol

**5. Errores comunes a evitar:**
‚ùå Se√±ar con cara neutra (las expresiones son obligatorias)
‚ùå Se√±ar demasiado r√°pido al principio
‚ùå No mantener contacto visual
‚ùå Usar espa√±ol se√±ado (se√±ar en orden espa√±ol)

**6. Recursos:**
- Practica con esta app ag√©ntica
- Busca cursos presenciales con profesores sordos
- √önete a comunidades en l√≠nea
- Participa en eventos de la comunidad sorda

**Recuerda:** La paciencia y el respeto por la cultura sorda son esenciales. ¬°Disfruta el aprendizaje! ü§ü`,
        category: 'aprendizaje',
        confidence: 0.95,
      },
      {
        id: 'dactilologia',
        title: 'Dactilolog√≠a (Alfabeto Manual)',
        content: `La dactilolog√≠a es el alfabeto manual usado para deletrear palabras letra por letra.

**Cu√°ndo usar dactilolog√≠a:**
- Nombres propios (personas, lugares)
- Palabras t√©cnicas sin se√±a establecida
- √ânfasis en una palabra espec√≠fica
- Pr√©stamos ling√º√≠sticos del espa√±ol

**Cu√°ndo NO usarla:**
‚ùå Para todo (no es lengua de se√±as, es solo una herramienta)
‚ùå Palabras comunes que tienen se√±a propia
‚ùå Conversaci√≥n fluida (ralentiza mucho)

**Caracter√≠sticas del alfabeto LSCh:**
- Se realiza con UNA mano (monodigital)
- A la altura del hombro
- Palma generalmente hacia adelante
- Movimiento suave entre letras

**Tips para dactilolog√≠a:**
1. **Claridad**: Pausa brevemente entre palabras
2. **Ritmo**: Mant√©n velocidad constante
3. **Movimiento**: Ligero movimiento lateral (no exagerado)
4. **Labios**: Puedes mover los labios suavemente

**Pr√°ctica:**
Empieza con tu nombre, luego nombres de ciudades, y gradualmente palabras m√°s largas.

**Nota:** La dactilolog√≠a del LSCh es diferente a la del ASL, LSM, etc. Cada lengua de se√±as tiene su propio alfabeto manual.`,
        category: 'tecnica',
        confidence: 0.90,
      },
    ];

    // Simple keyword matching for fallback
    if (lowerQuery.includes('historia')) {
      return [knowledgeBase[0]];
    } else if (lowerQuery.includes('gramatica') || lowerQuery.includes('gram√°tica') || lowerQuery.includes('estructura')) {
      return [knowledgeBase[1]];
    } else if (lowerQuery.includes('cultura') || lowerQuery.includes('comunidad')) {
      return [knowledgeBase[2]];
    } else if (lowerQuery.includes('expresion') || lowerQuery.includes('expresi√≥n') || lowerQuery.includes('facial') || lowerQuery.includes('cara')) {
      return [knowledgeBase[3]];
    } else if (lowerQuery.includes('diferencia') || lowerQuery.includes('universal') || lowerQuery.includes('asl') || lowerQuery.includes('otros')) {
      return [knowledgeBase[4]];
    } else if (lowerQuery.includes('aprender') || lowerQuery.includes('consejo') || lowerQuery.includes('tip') || lowerQuery.includes('como')) {
      return [knowledgeBase[5]];
    } else if (lowerQuery.includes('dactilo') || lowerQuery.includes('alfabeto') || lowerQuery.includes('deletrear')) {
      return [knowledgeBase[6]];
    }

    // Return top 2 most relevant by default
    return knowledgeBase.slice(0, 2);
  }

  /**
   * Generate embedding for text
   */
  private async getEmbedding(text: string): Promise<number[]> {
    try {
      const response: any = await this.env.AI.run('@cf/baai/bge-base-en-v1.5', {
        text: [text],
      });

      console.log('[KnowledgeService] Embedding response type:', typeof response, Array.isArray(response));

      // Workers AI returns the embeddings in different formats depending on the model
      if (response && response.data && Array.isArray(response.data) && response.data.length > 0) {
        return response.data[0];
      } else if (Array.isArray(response) && response.length > 0) {
        return response[0];
      } else if (response && typeof response === 'object' && 'shape' in response && 'data' in response) {
        // Handle tensor format
        return response.data;
      } else {
        console.error('[KnowledgeService] Unexpected embedding response:', JSON.stringify(response).substring(0, 200));
        throw new Error('Unexpected embedding response format');
      }
    } catch (error) {
      console.error('[KnowledgeService] Error generating embedding:', error);
      throw error;
    }
  }

  /**
   * Parse Vectorize results into KnowledgeArticle
   */
  private parseVectorizeResults(results: any): KnowledgeArticle[] {
    if (!results.matches || results.matches.length === 0) {
      return [];
    }

    return results.matches
      .filter((match: any) => match.metadata)
      .map((match: any) => {
        const metadata = match.metadata!;
        
        return {
          id: match.id || metadata.id || 'unknown',
          title: metadata.title || 'Sin t√≠tulo',
          content: metadata.content || '',
          category: metadata.category || 'general',
          confidence: match.score || 0,
        };
      });
  }

  /**
   * Get all available categories
   */
  getCategories(): string[] {
    return ['historia', 'gramatica', 'cultura', 'tecnica', 'linguistica', 'aprendizaje'];
  }
}

